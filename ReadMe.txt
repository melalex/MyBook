Практическое задание:
Результаты работы записываем в приватный репозиторий nickname/Exeresice2.

1. Создаем проект консольного приложения для Mac OS.
2. В настройках проекта отключаем ARC:
	- Выбираем файл проекта в левом навигаторе;
	- Выбираем категорю проекта;
	- Переходим на вкладку настроек сборки;
	- Находим опцию "Objective-C Automated Reference Counting" (работает поиск по опциям, ищем ARC);
	- Отключаем опцию.
3. В настройках проекта добавляем префикс классов:
	- Выбираем файл проекта в левом навигаторе;
	- В правой панели находим опцию Class Prefix;
	- Вводим префикс класса (три большие буквы);
4. Создаем класс, описывающий сущность книги:
	- Книга должна содержать строковое название, числовой год выпуска, перечисляемый тип (paperback or hardcover);
	- Для каждого из этих свойств должен быть реализован getter и setter;
	- Реализовать инициализатор c возможностью задать название, год и тип книги;
	- Создаем фабричный метод класса, который будет принимать название, год и тип книги, будет возвращать новосозданный autoreleased-экземпляр книги;
	- Реализовать корректный dealloc;
	- Расширяем описание класса (description), добавив название, год и тип.
5. Создаем основную программу (функция main):
	- В ней создаем несколько различных экземпляров класса Книга разными способами;
	- Некоторым книгам меняем их свойства;
	- По ходу программы записываем в NSLog книги.
6. Создаем класс, описывающий сущность посетителя библиотеки:
	- Посетитель должен иметь имя, фамилию, год рождения;
	- Каждое свойство должно быть объявлено в интерфейсе как declared property;
	- Для каждого из этих свойств должен быть реализован getter и setter;
	- Реализовать инициализатор c возможностью задать вышеописанные свойства;
	- Создаем фабричный метод класса, который будет принимать имя, фамилию, год рождения;
	- Реализовываем корректный dealloc;
	- Реализовываем readonly свойство - fullName, которое состоит из фамилии и имени через пробел;
	- Расширяем описание класса (description), добавив fullName.
	- Реализовываем методы в классе Посетитель:
                      - (BOOL)takeBook:(Book)aBook;
                      - (BOOL)returnCurrentBook;
	- Добавляем readonly свойство currentBook в класс Пользователь типа Книга;
	- Добавляем readwrite свойство owner в класс Книга типа Пользователь;
	- Метод takeBook должен должен устанавливать взаимосвязь между Посетителем и Книгой, у посетителя должна появится currentBook, а у книги owner.
	- Если Посетитель уже взял какую-то книгу, или книга уже взята кем-то, то метод должен вернуть NO;
	- Метод returnCurrentBook должен возвращать YES, если у Постетителя есть книга, иначе NO;
	- Метод returnCurrentBook должен обнулять поля currentBook у Посетителя и owner у Книги.
7. Расширяем основную программу (функция main):
	- В ней создаем несколько различных экземпляров класса Пользователь разными способами;
	- Некоторым посетителям меняем из имена;
	- Даём различные книги различным посетителям;
	- Убеждаемся, что метод takeBook: возвращает значение YES, когда книга успешно взята, NO иначе.
	- По ходу программы записываем в NSLog посетителей.
8. Изменяем класс, описывающий сущность Посетителя библиотеки:
	- Посетитель должен быть в состоянии взять несколько Книг;
	- Вместо того, что бы хранить ссылку на одну Книгу (currentBook), теперь храним массив Книг;
	- Соответственно метод takeBook: должен корректно работать, если у Посетителя уже есть другие Книги;
	- Изменяем метод returnCurrentBook, переименовав в returnBook:, добавив аргумент – Книга.
9. В классе Книга добавляем свойство строковое identifier:
	- Свойство неизменяемое;
	- Должна быть возможность создать Книгу c идентификатором;
	- Должна быть возможность создать Книгу без идентификатора, тогда для такой Книги он генерируется новый (см. NSUUID);
10. Добавляем новый класс – Библиотека.
	- Библиотека содержит в себе списки Книг и Посетителей;
	- Свойства списка Книг и Посетителей должны быть неизменяемыми в интерфейсе (readonly NSArray);
	- Реализовываем методы для добавления и удаления Книги;
	- Реализовываем методы для добавленияи удаления Посетителя.
11. Во всех трех классах реализовываем методы сериализации в словарь:
	- Добавляем методы:
		- (instancetype)initWithDictionaryRepresentation:(NSDictionary *)aDictionary;
		- (NSDictionary *)dictionaryRepresentation;
	- Сериализированная Библиотека должна содержать в себе информацию о Книгах и Посетителях;
	- Методы для сериализации должны быть реализованы в отдельных категориях (и в отдельных файлах) от основных классов.
12. Для всех трех классов реализовываем метод isEqual:
	- Книги считаются одинаковыми, если одинаковы названия, года, типы книги, идентификаторы, владельцы;
	- Посетители считаются одинаковыми, если совпадают имена, фамилии, года рождения, взятые Книги;
	- Библиотеки считаются одинаковыми, если у них одинаковые Посетители и Книги.
13. Реализовываем функцию main, в которой проверяем работоспособность всего вышенаписанного функционала.

Опциональное задание (можно выполнять только после реализации всех обязательных):
14. К классу Библиотека добавляем методы:
		- (instancetype)initWithFilePath:(NSString *)aPath;
		- (void)writeToFilePath:(NSString *)aPath;
	- В файл должен сохраняться JSON-сериализация словаря из dictionaryRepresentation Библиотеки
15. В классе Библиотека реализовать методы поиска Книг по названию, Посетителей по имени или фамилии. Совпадение строк может быть частичным и case insensitive.
